@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using dnd_companion_app.Data
@inject WeatherForecastService ForecastService
@inject NavigationManager NavigationManager

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="PreviousWeek">Previous week</button>
    <button @onclick="NextWeek">Next week</button>
}

@code {
    private WeatherForecast[]? forecasts;
    private DateTime startDate;

    protected override async Task OnParametersSetAsync()
    {
        startDate = StartDate ?? DateTime.Now;
        forecasts = await ForecastService.GetForecastAsync(startDate);
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime? StartDate { get; set; }

    void PreviousWeek() => UpdateStartDate(-7);
    void NextWeek() => UpdateStartDate(7);


    void UpdateStartDate(int days)
    {
        startDate = startDate.AddDays(days);
        var address = NavigationManager.GetUriWithQueryParameter(nameof(StartDate), startDate);
        NavigationManager.NavigateTo(address);
    }
}